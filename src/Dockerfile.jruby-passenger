# JRuby + Phusion Passenger + Nginx Dockerfile
# Fixed version using official passenger-docker patterns
# Based on phusion/baseimage with custom JRuby installation

FROM phusion/baseimage:noble-1.0.2
LABEL maintainer="Monitus Team"

# Environment variables for JRuby optimization
ENV RACK_ENV=production \
    PORT=80 \
    LOG_LEVEL=info \
    # JRuby JVM optimizations
    JRUBY_OPTS="-Xcompile.invokedynamic=true -J-Djnr.ffi.asm.enabled=false" \
    JAVA_OPTS="-Xmx1G -Xms256M -XX:+UseG1GC -XX:MaxGCPauseMillis=200" \
    MALLOC_ARENA_MAX=2 \
    # Passenger configuration
    PASSENGER_APP_ENV=production \
    PASSENGER_MIN_INSTANCES=2 \
    PASSENGER_MAX_INSTANCES=8 \
    PASSENGER_CONCURRENCY_MODEL=thread \
    PASSENGER_THREAD_COUNT=16

# Use bash as shell for RVM compatibility
SHELL ["/bin/bash", "-c"]

# Add build scripts directory (emulating official passenger-docker structure)
ADD . /pd_build

# Install dependencies, create app user, and install RVM in one layer
RUN set -e && \
    # Install base system dependencies
    apt-get update && apt-get install -y --no-install-recommends \
        curl wget gnupg2 software-properties-common \
        build-essential git-core ca-certificates \
        libssl-dev libreadline-dev zlib1g-dev \
        libyaml-dev libxml2-dev libxslt1-dev \
        libffi-dev libgdbm-dev libncurses5-dev \
        libsqlite3-dev libmysqlclient-dev libpq-dev && \
    rm -rf /var/lib/apt/lists/* && \
    # Create app user and group
    groupadd -r app && \
    useradd -r -g app -d /home/app -s /bin/bash -m app && \
    # Import RVM GPG keys
    gpg --keyserver hkp://keyserver.ubuntu.com --recv-keys \
        409B6B1796C275462A1703113804BB82D39DC0E3 \
        7D2BAF1CF37B13E2069D6956105BD0E739499BDB && \
    # Install RVM
    curl -sSL https://get.rvm.io | bash -s stable && \
    # Configure RVM environment 
    echo 'export rvmsudo_secure_path=1' > /etc/profile.d/rvm_secure_path.sh && \
    echo 'export rvm_silence_path_mismatch_check_flag=1' > /etc/profile.d/rvm_silence_path_warning.sh && \
    chmod +x /etc/profile.d/rvm_*.sh && \
    # Add app user to rvm group (user exists now)
    usermod -a -G rvm app && \
    # Install system-rvm-exec script
    echo '#!/bin/bash' > /usr/bin/rvm-exec && \
    echo 'exec /usr/local/rvm/bin/rvm-exec "$@"' >> /usr/bin/rvm-exec && \
    chmod +x /usr/bin/rvm-exec && \
    # Ensure bash loads RVM environment
    echo 'if [[ "$rvm_prefix" = "" ]]; then for file in /etc/profile.d/*rvm*; do source $file; done; fi' >> /etc/bash.bashrc

# Install Java 17 for JRuby
RUN apt-get update && apt-get install -y --no-install-recommends \
    openjdk-17-jre-headless && \
    dpkg-reconfigure -f noninteractive ca-certificates-java && \
    rm -rf /var/lib/apt/lists/*

# Install JRuby following official passenger-docker patterns
RUN set -e && \
    source /usr/local/rvm/scripts/rvm && \
    # Install JRuby 9.4.14.0
    echo "Installing JRuby 9.4.14.0..." && \
    RVM_ID="jruby-9.4.14.0" && \
    /usr/local/rvm/bin/rvm install $RVM_ID && \
    /usr/local/rvm/bin/rvm-exec $RVM_ID@global gem install rake rack --no-document && \
    # Create wrapper scripts following official patterns
    echo '#!/bin/sh' > /usr/bin/jruby9.4 && \
    echo 'exec /usr/local/rvm/wrappers/jruby-9.4.14.0/ruby "$@"' >> /usr/bin/jruby9.4 && \
    chmod +x /usr/bin/jruby9.4 && \
    echo '#!/bin/sh' > /usr/bin/jruby && \
    echo 'exec /usr/local/rvm/wrappers/jruby-9.4.14.0/ruby "$@"' >> /usr/bin/jruby && \
    chmod +x /usr/bin/jruby && \
    echo '#!/bin/sh' > /usr/bin/ruby && \
    echo 'exec /usr/local/rvm/wrappers/jruby-9.4.14.0/ruby "$@"' >> /usr/bin/ruby && \
    chmod +x /usr/bin/ruby && \
    echo '#!/bin/sh' > /usr/bin/gem && \
    echo 'exec /usr/local/rvm/wrappers/jruby-9.4.14.0/gem "$@"' >> /usr/bin/gem && \
    chmod +x /usr/bin/gem && \
    echo '#!/bin/sh' > /usr/bin/bundle && \
    echo 'exec /usr/local/rvm/wrappers/jruby-9.4.14.0/bundle "$@"' >> /usr/bin/bundle && \
    chmod +x /usr/bin/bundle && \
    # Set JRuby as default
    bash -lc "rvm use $RVM_ID --default"

# Install Nginx + Passenger (fixed for Ubuntu Noble)
RUN set -e && \
    # Add Passenger repository for Ubuntu Noble
    curl https://oss-binaries.phusionpassenger.com/auto-software-signing-gpg-key.txt | gpg --dearmor | tee /etc/apt/trusted.gpg.d/phusion.gpg >/dev/null && \
    echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger noble main' > /etc/apt/sources.list.d/passenger.list && \
    apt-get update && \
    # Install nginx-extras (includes modules) and passenger
    apt-get install -y nginx-extras passenger && \
    # Enable Passenger module
    echo 'load_module modules/ngx_http_passenger_module.so;' > /etc/nginx/modules-enabled/50-mod-http-passenger.conf && \
    # Configure Passenger in nginx.conf
    echo 'passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;' >> /etc/nginx/nginx.conf && \
    echo 'passenger_ruby /usr/bin/jruby;' >> /etc/nginx/nginx.conf && \
    rm -rf /var/lib/apt/lists/*

# Precompile Passenger native support for JRuby
RUN set -e && \
    source /usr/local/rvm/scripts/rvm && \
    rvm use jruby-9.4.14.0 && \
    jruby --dev -S passenger-config build-native-support && \
    su - app -c "source /usr/local/rvm/scripts/rvm && rvm use jruby-9.4.14.0 && jruby --dev -S passenger-config build-native-support" || true

# Create application directory and set ownership
RUN mkdir -p /home/app/webapp && \
    chown -R app:app /home/app

# Set working directory
WORKDIR /home/app/webapp

# Copy and install gems as app user
COPY --chown=app:app Gemfile.jruby-passenger Gemfile
USER app
RUN set -e && \
    source /usr/local/rvm/scripts/rvm && \
    rvm use jruby-9.4.14.0 && \
    bundle config set --local path 'vendor/bundle' && \
    bundle config set --local without 'development test' && \
    bundle install --jobs=4 --retry=3

# Switch back to root for system configuration
USER root

# Copy application code
COPY --chown=app:app . .

# Remove lockfiles to avoid conflicts
RUN rm -f Gemfile.lock

# Configure Passenger to use JRuby
RUN echo 'passenger_ruby /usr/bin/jruby;' > /etc/nginx/conf.d/passenger-jruby.conf

# Copy Nginx virtual host configuration
COPY nginx-jruby.conf /etc/nginx/sites-available/webapp.conf
RUN rm -f /etc/nginx/sites-enabled/default && \
    ln -sf /etc/nginx/sites-available/webapp.conf /etc/nginx/sites-enabled/webapp.conf

# Install Nginx runit service (following official patterns)
RUN mkdir -p /etc/service/nginx && \
    echo '#!/bin/sh' > /etc/service/nginx/run && \
    echo 'exec /usr/sbin/nginx -g "daemon off;"' >> /etc/service/nginx/run && \
    chmod +x /etc/service/nginx/run && \
    # Use SIGQUIT for nginx shutdown
    mkdir -p /etc/service/nginx/control/ && \
    echo '#!/bin/sh' > /etc/service/nginx/control/t && \
    echo 'kill -QUIT `cat /run/nginx.pid`' >> /etc/service/nginx/control/t && \
    chmod +x /etc/service/nginx/control/t

# Copy startup script
COPY start-passenger-jruby.sh /etc/my_init.d/99_start_jruby_app.sh
RUN chmod +x /etc/my_init.d/99_start_jruby_app.sh

# Create log directory
RUN mkdir -p /var/log/webapp && \
    chown -R app:app /var/log/webapp

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=60s \
    CMD curl -f http://localhost/health || exit 1

# Expose port 80 (Nginx)
EXPOSE 80

# Use the standard baseimage init system
CMD ["/sbin/my_init"]
