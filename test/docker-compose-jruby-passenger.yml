# Docker Compose configuration for testing JRuby + Passenger + Nginx setup
# Updated to use fixed Dockerfile with official passenger-docker patterns

version: '3.8'

services:
  # JRuby + Passenger + Nginx (Fixed version)
  passenger_jruby_fixed:
    build:
      context: ../src
      dockerfile: Dockerfile.jruby-passenger
    ports:
      - "8082:80"
    environment:
      - RACK_ENV=production
      - LOG_LEVEL=info
      - PASSENGER_MIN_INSTANCES=1
      - PASSENGER_MAX_INSTANCES=4
      - PASSENGER_THREAD_COUNT=8
      - JAVA_OPTS=-Xmx512M -Xms128M -XX:+UseG1GC
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - type: tmpfs
        target: /tmp
        tmpfs:
          size: 100M
      - type: tmpfs
        target: /var/log/webapp
        tmpfs:
          size: 50M
    networks:
      - jruby_test

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-jruby.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - jruby_test

  # Test runner for JRuby + Passenger setup
  test_jruby_passenger:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.with-app
    depends_on:
      passenger_jruby_fixed:
        condition: service_healthy
    environment:
      - PASSENGER_JRUBY_FIXED_URL=http://passenger_jruby_fixed
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - ./tests:/app/tests:ro
      - ./test-jruby-passenger.sh:/app/test-runner.sh:ro
    networks:
      - jruby_test
    command: ["/app/test-runner.sh"]

networks:
  jruby_test:
    driver: bridge
